import requests
from bs4 import BeautifulSoup
import json
import time
import pandas as pd
import numpy as np

BASE_SITE = 'https://www.litres.ru'
BASE_URL = 'https://www.litres.ru/genre/programmirovanie-5272/page-{}/'
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36'
}

def parse_book_details(book):
    try:
        name = book.select_one('.ArtInfo_title__h_5Ay').text.strip()
    except AttributeError:
        name = 'Неизвестно'

    try:
        author = book.select_one('.ArtInfo_author__0W3GJ').text.strip()
    except AttributeError:
        author = 'Неизвестно'

    try:
        link = book.select_one('a')['href']
    except (AttributeError, TypeError):
        link = 'Неизвестно'

    try:
        rating = book.select_one('.ArtRating_rating__ntve8').text.strip()
    except (AttributeError, TypeError):
        rating = 'Нет рейтинга'

    try:
        rating_count = book.select_one('.ArtRating_votes__MIJS1').text.strip()
    except AttributeError:
        rating_count = 'Нет оценок'

    try:
        review_count = book.select_one('.review_count').text.strip()
    except AttributeError:
        review_count = 'Нет отзывов'

    try:
        pages_count = book.select_one('.pages').text.strip()
    except AttributeError:
        pages_count = 'Не указано'

    try:
        price = book.select_one('.ArtPriceFooter_ArtPriceFooterPrices__final__7AMjB').text.strip().replace("\xa0₽", "").replace("\xa0","")
    except AttributeError:
        price = 'Не указана'

    try:
        age = book.select_one('.age-restriction').text.strip()
    except AttributeError:
        age = 'Нет ограничения'

    try:
        year = book.select_one('.year').text.strip()
    except AttributeError:
        year = 'Не указан'

    text_reviews = []  # Тексты отзывов будут собираться отдельно

    return {
        'name': name,
        'author': author,
        'link': link,
        'rating': rating,
        'rating_count': rating_count,
        'review_count': review_count,
        'pages_count': pages_count,
        'price': price,
        'text_reviews': text_reviews,
        'age': age,
        'year': year
    }

def scrape_books_from_page(page):
    """Сбор данных о книгах с одной страницы"""
    url = BASE_URL.format(page)
    response = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(response.content, 'html.parser')
    books = soup.select('.ArtDefault_cover__text__HKF_g')
    return [parse_book_details(book) for book in books]

def scrape_all_books(pages=1):
    """Сбор данных о книгах с нескольких страниц"""
    all_books = []
    for page in range(1, pages + 1):
        print(f'Scraping page {page}')
        books = scrape_books_from_page(page)
#        for item in books:
#            print(item['price'])
#            url = BASE_SITE + item["link"]
 #           response = requests.get(url, headers=HEADERS)
 #           soup = BeautifulSoup(response.content, 'html.parser')
 #           book_detail = soup.select('.BookCard_book__1IAPE')
#            book_detail = book_detail.select_one('.book-factoids__reviews').text.strip()
#            try:
#                item['review_count'] = book_detail.select_one('.book-factoids__reviews').text.strip()
#            except AttributeError:
 #               item['review_count'] = 'Нет отзывов'
        all_books.extend(books)
        time.sleep(2)  # Задержка между запросами для предотвращения блокировки
    return all_books

if __name__ == '__main__':
    books_data = scrape_all_books()
    # Сохранение данных в файл
    with open('books_data.json', 'w', encoding='utf-8') as f:
        json.dump(books_data, f, ensure_ascii=False, indent=4)

df = pd.read_json('books_data.json')

# 1. Вывод первых 5 строк
print("Первые 5 строк датасета:")
print(df.head())

# 2. Определение количества строк и столбцов
print("\nКоличество строк и столбцов:")
print(df.shape)

# 3. Проверка на пропуски
print("\nПроверка на пропуски:")
print(df.isnull().sum())

# 4. Приведение типов данных
# Приведение строковых чисел к числовым типам
df['rating'] = pd.to_numeric(df['rating'], errors='coerce')
df['rating_count'] = pd.to_numeric(df['rating_count'], errors='coerce')
df['price'] = df['price'].astype(int)

# 5. Вывод описательных статистик переменных
print("\nОписательные статистики переменных:")
print(df.describe(include='all'))

# 6. Медианная цена книги
median_price = df['price'].median()
print("\nМедианная цена книги:")
print(median_price)

# 7. Наиболее частое возрастное ограничение
most_common_age = df['age'].mode()[0]
print("\nНаиболее частое возрастное ограничение:")
print(most_common_age)

# 9. Количество книг с оценкой ниже 4.25
books_below_4_25 = df[df['rating'] < 4.25].shape[0]
print("\nКоличество книг с оценкой ниже 4.25:")
print(books_below_4_25)
